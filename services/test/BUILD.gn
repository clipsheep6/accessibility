# Copyright (C) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/accessibility/services/test/aamstestmock.gni")
import("//build/test.gni")

module_output_path = "accessibility/framework_test"

###############################################################################
#1. intent(c++) get/set test without transport

config("module_private_config") {
  visibility = [ ":*" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  include_dirs = aams_mock_include_dirs
  include_dirs += [
    "//base/accessibility/common/log/include",
    "//base/accessibility/dummyData",
    "//base/accessibility/frameworks/aafwk/include",
    "//base/accessibility/frameworks/asacfwk/include",
    "//base/accessibility/interfaces/innerkits/aafwk/include",
    "//base/accessibility/interfaces/innerkits/acfwk/include",
    "//base/accessibility/interfaces/innerkits/asacfwk/include",
    "//base/accessibility/interfaces/innerkits/common/include",
    "//base/accessibility/services/aams/include",
    "//base/accessibility/services/test/mock",
    "//base/accessibility/util/include",
    "//base/global/resource_management/interfaces/inner_api/include",
    "//base/notification/common_event_service/interfaces/inner_api",
    "//foundation",
    "${aafwk_kits_path}/ability/native/include/",
    "${aafwk_kits_path}/appkit/native/ability_runtime",
    "${aafwk_kits_path}/appkit/native/ability_runtime/context",
    "${aafwk_kits_path}/appkit/native/app/include/",
    "${aafwk_inner_api_path}/ability_manager/include",
    "${aafwk_inner_api_path}/app_manager/include/appmgr",
    "${aafwk_services_path}/abilitymgr/include",
    "//foundation/distributedschedule/safwk/interfaces/innerkits/safwk",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy/include",
    "//foundation/graphic/graphic_2d/rosen/modules/render_service_base/include",
    "//foundation/multimedia/image_standard/interfaces/kits/native/include",
    "//foundation/multimodalinput/input/util/common/include",
    "//foundation/windowmanager/dm/include",
    "//foundation/windowmanager/interfaces/innerkits/dm",
    "//foundation/windowmanager/interfaces/innerkits/wm",
    "//foundation/windowmanager/utils/include",
    "//third_party/json/include",
    "//third_party/jsoncpp/include",
    "//third_party/jsoncpp/include/json",
    "//utils/native/base/include",
    "//utils/native/base/include",
    "//utils/system/safwk/native/include",
    "//utils/system/safwk/native/include",
    "mock/aafwk/include",
  ]
  defines = [
    "AAMS_LOG_TAG = \"accessibility_test\"",
    "AAMS_LOG_DOMAIN = 0xD005205",
  ]
}

MockDistributedscheduleSrc = []

################################################################################
ohos_moduletest("aams_accessibility_touch_guider_test") {
  module_out_path = module_output_path

  sources = [
    "../aams/src/accessibility_account_data.cpp",
    "../aams/src/accessibility_common_event.cpp",
    "../aams/src/accessibility_display_manager.cpp",
    "../aams/src/accessibility_event_transmission.cpp",
    "../aams/src/accessibility_gesture_recognizer.cpp",
    "../aams/src/accessibility_input_interceptor.cpp",
    "../aams/src/accessibility_keyevent_filter.cpp",
    "../aams/src/accessibility_mouse_autoclick.cpp",
    "../aams/src/accessibility_short_key.cpp",
    "../aams/src/accessibility_touchEvent_injector.cpp",
    "../aams/src/accessibility_touch_guider.cpp",
    "../aams/src/accessibility_window_connection.cpp",
    "../aams/src/accessibility_window_manager.cpp",
    "../aams/src/accessibility_zoom_gesture.cpp",
    "../aams/src/accessibility_zoom_handler.cpp",
    "../aams/src/accessible_ability_channel.cpp",
    "../aams/src/accessible_ability_connection.cpp",
    "../aams/src/accessible_ability_manager_service.cpp",
    "../aams/src/accessible_ability_manager_service_event_handler.cpp",
    "../aams/src/json_utils.cpp",
    "//base/accessibility/frameworks/common/src/accessibility_window_info.cpp",
    "//base/accessibility/services/test/mock/mock_ability_connect_callback_stub.cpp",
    "//base/accessibility/services/test/mock/mock_ability_manager_client.cpp",
    "//base/accessibility/services/test/mock/mock_accessibility_element_operator_impl.cpp",
    "//base/accessibility/services/test/mock/mock_accessibility_element_operator_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_accessible_ability_client_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_bundle_manager.cpp",
    "//base/accessibility/services/test/mock/mock_bundle_mgr_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_display.cpp",
    "//base/accessibility/services/test/mock/mock_display_manager.cpp",
    "//base/accessibility/services/test/mock/mock_service_registry.cpp",
    "//base/accessibility/services/test/mock/mock_system_ability.cpp",
    "//third_party/jsoncpp/src/lib_json/json_writer.cpp",
    "moduletest/aamstest/aams_accessibility_touch_guider_test/aams_accessibility_touch_guider_test.cpp",
  ]
  sources += aams_mock_distributeddatamgr_src
  sources += aams_mock_multimodalinput_src
  sources += aams_mock_powermanager_src
  sources += MockDistributedscheduleSrc

  configs = [ ":module_private_config" ]

  deps = [
    "//base/accessibility/interfaces/innerkits/common:accessibility_common",
    "//base/accessibility/services/interface:aams_interface",
    "//base/global/resource_management/frameworks/resmgr:global_resmgr",
    "//foundation/windowmanager/utils:libwmutil",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//third_party/jsoncpp:jsoncpp",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:runtime",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
  ]

  public_deps = [
    "//foundation/graphic/graphic_2d:libwmclient",
    "//foundation/multimedia/image_standard/interfaces/innerkits:image_native",
    "//foundation/windowmanager/wm:libwm",
  ]
}

################################################################################
ohos_moduletest("aams_accessibility_touchEvent_injector_test") {
  module_out_path = module_output_path

  sources = [
    "../aams/src/accessibility_account_data.cpp",
    "../aams/src/accessibility_common_event.cpp",
    "../aams/src/accessibility_display_manager.cpp",
    "../aams/src/accessibility_event_transmission.cpp",
    "../aams/src/accessibility_gesture_recognizer.cpp",
    "../aams/src/accessibility_input_interceptor.cpp",
    "../aams/src/accessibility_keyevent_filter.cpp",
    "../aams/src/accessibility_mouse_autoclick.cpp",
    "../aams/src/accessibility_short_key.cpp",
    "../aams/src/accessibility_touchEvent_injector.cpp",
    "../aams/src/accessibility_touch_guider.cpp",
    "../aams/src/accessibility_window_connection.cpp",
    "../aams/src/accessibility_window_manager.cpp",
    "../aams/src/accessibility_zoom_gesture.cpp",
    "../aams/src/accessibility_zoom_handler.cpp",
    "../aams/src/accessible_ability_channel.cpp",
    "../aams/src/accessible_ability_connection.cpp",
    "../aams/src/accessible_ability_manager_service.cpp",
    "../aams/src/accessible_ability_manager_service_event_handler.cpp",
    "../aams/src/json_utils.cpp",
    "//base/accessibility/services/test/mock/mock_ability_connect_callback_stub.cpp",
    "//base/accessibility/services/test/mock/mock_ability_manager_client.cpp",
    "//base/accessibility/services/test/mock/mock_accessibility_element_operator_impl.cpp",
    "//base/accessibility/services/test/mock/mock_accessibility_element_operator_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_accessible_ability_client_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_bundle_manager.cpp",
    "//base/accessibility/services/test/mock/mock_bundle_mgr_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_display.cpp",
    "//base/accessibility/services/test/mock/mock_display_manager.cpp",
    "//base/accessibility/services/test/mock/mock_service_registry.cpp",
    "//base/accessibility/services/test/mock/mock_system_ability.cpp",
    "//third_party/jsoncpp/src/lib_json/json_writer.cpp",
    "moduletest/aamstest/aams_accessibility_touchEvent_injector_test/aams_accessibility_touchEvent_injector_test.cpp",
  ]

  sources += aams_mock_distributeddatamgr_src
  sources += aams_mock_multimodalinput_src
  sources += aams_mock_powermanager_src
  sources += MockDistributedscheduleSrc

  configs = [ ":module_private_config" ]

  deps = [
    "//base/accessibility/interfaces/innerkits/common:accessibility_common",
    "//base/accessibility/services/interface:aams_interface",
    "//base/global/resource_management/frameworks/resmgr:global_resmgr",
    "//foundation/windowmanager/utils:libwmutil",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//third_party/jsoncpp:jsoncpp",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:runtime",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
  ]

  public_deps = [
    "//foundation/graphic/graphic_2d:libwmclient",
    "//foundation/multimedia/image_standard/interfaces/innerkits:image_native",
    "//foundation/windowmanager/wm:libwm",
  ]
}

################################################################################
ohos_moduletest("aams_accessible_ability_channel_test") {
  module_out_path = module_output_path

  sources = [
    "../aams/src/accessibility_account_data.cpp",
    "../aams/src/accessibility_common_event.cpp",
    "../aams/src/accessibility_display_manager.cpp",
    "../aams/src/accessibility_event_transmission.cpp",
    "../aams/src/accessibility_gesture_recognizer.cpp",
    "../aams/src/accessibility_input_interceptor.cpp",
    "../aams/src/accessibility_keyevent_filter.cpp",
    "../aams/src/accessibility_mouse_autoclick.cpp",
    "../aams/src/accessibility_short_key.cpp",
    "../aams/src/accessibility_touchEvent_injector.cpp",
    "../aams/src/accessibility_touch_guider.cpp",
    "../aams/src/accessibility_window_connection.cpp",
    "../aams/src/accessibility_window_manager.cpp",
    "../aams/src/accessibility_zoom_gesture.cpp",
    "../aams/src/accessibility_zoom_handler.cpp",
    "../aams/src/accessible_ability_channel.cpp",
    "../aams/src/accessible_ability_connection.cpp",
    "../aams/src/accessible_ability_manager_service.cpp",
    "../aams/src/accessible_ability_manager_service_event_handler.cpp",
    "../aams/src/json_utils.cpp",
    "//base/accessibility/services/test/mock/mock_ability_connect_callback_stub.cpp",
    "//base/accessibility/services/test/mock/mock_ability_manager_client.cpp",
    "//base/accessibility/services/test/mock/mock_accessibility_element_operator_impl.cpp",
    "//base/accessibility/services/test/mock/mock_accessibility_element_operator_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_accessible_ability_client_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_bundle_manager.cpp",
    "//base/accessibility/services/test/mock/mock_bundle_mgr_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_data.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_manager.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_subscribe_info.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_subscriber.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_support.cpp",
    "//base/accessibility/services/test/mock/mock_display.cpp",
    "//base/accessibility/services/test/mock/mock_display_manager.cpp",
    "//base/accessibility/services/test/mock/mock_matching_skill.cpp",
    "//base/accessibility/services/test/mock/mock_service_registry.cpp",
    "//base/accessibility/services/test/mock/mock_system_ability.cpp",
    "//third_party/jsoncpp/src/lib_json/json_writer.cpp",
    "moduletest/aamstest/aams_accessible_ability_channel_test/aams_accessible_ability_channel_test.cpp",
  ]

  sources += aams_mock_distributeddatamgr_src
  sources += aams_mock_multimodalinput_src
  sources += aams_mock_powermanager_src
  sources += MockDistributedscheduleSrc

  configs = [ ":module_private_config" ]

  deps = [
    "//base/accessibility/interfaces/innerkits/common:accessibility_common",
    "//base/accessibility/services/interface:aams_interface",
    "//base/global/resource_management/frameworks/resmgr:global_resmgr",
    "//foundation/windowmanager/utils:libwmutil",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//third_party/jsoncpp:jsoncpp",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:runtime",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "ipc:libdbinder",
    "os_account:os_account_innerkits",
  ]

  public_deps = [
    "//foundation/graphic/graphic_2d:libwmclient",
    "//foundation/multimedia/image_standard/interfaces/innerkits:image_native",
    "//foundation/windowmanager/wm:libwm",
  ]
}

################################################################################
ohos_moduletest("aams_server_test") {
  module_out_path = module_output_path

  sources = [
    "../aams/src/accessibility_account_data.cpp",
    "../aams/src/accessibility_common_event.cpp",
    "../aams/src/accessibility_display_manager.cpp",
    "../aams/src/accessibility_event_transmission.cpp",
    "../aams/src/accessibility_gesture_recognizer.cpp",
    "../aams/src/accessibility_input_interceptor.cpp",
    "../aams/src/accessibility_keyevent_filter.cpp",
    "../aams/src/accessibility_mouse_autoclick.cpp",
    "../aams/src/accessibility_short_key.cpp",
    "../aams/src/accessibility_touchEvent_injector.cpp",
    "../aams/src/accessibility_touch_guider.cpp",
    "../aams/src/accessibility_window_connection.cpp",
    "../aams/src/accessibility_window_manager.cpp",
    "../aams/src/accessibility_zoom_gesture.cpp",
    "../aams/src/accessibility_zoom_handler.cpp",
    "../aams/src/accessible_ability_channel.cpp",
    "../aams/src/accessible_ability_connection.cpp",
    "../aams/src/accessible_ability_manager_service.cpp",
    "../aams/src/accessible_ability_manager_service_event_handler.cpp",
    "../aams/src/json_utils.cpp",
    "//base/accessibility/services/test/mock/mock_ability_connect_callback_stub.cpp",
    "//base/accessibility/services/test/mock/mock_ability_manager_client.cpp",
    "//base/accessibility/services/test/mock/mock_accessible_ability_client_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_bundle_manager.cpp",
    "//base/accessibility/services/test/mock/mock_bundle_mgr_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_data.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_manager.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_subscribe_info.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_subscriber.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_support.cpp",
    "//base/accessibility/services/test/mock/mock_display.cpp",
    "//base/accessibility/services/test/mock/mock_display_manager.cpp",
    "//base/accessibility/services/test/mock/mock_matching_skill.cpp",
    "//base/accessibility/services/test/mock/mock_service_registry.cpp",
    "//base/accessibility/services/test/mock/mock_system_ability.cpp",
    "//third_party/jsoncpp/src/lib_json/json_writer.cpp",
    "moduletest/aamstest/aams_server_test/aams_server_test.cpp",
  ]

  sources += aams_mock_distributeddatamgr_src
  sources += aams_mock_multimodalinput_src
  sources += aams_mock_powermanager_src
  sources += MockDistributedscheduleSrc

  configs = [ ":module_private_config" ]

  deps = [
    "//base/accessibility/interfaces/innerkits/common:accessibility_common",
    "//base/accessibility/services/interface:aams_interface",
    "//base/global/resource_management/frameworks/resmgr:global_resmgr",
    "//foundation/windowmanager/utils:libwmutil",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//third_party/jsoncpp:jsoncpp",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:runtime",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "ipc:libdbinder",
    "os_account:os_account_innerkits",
  ]

  public_deps = [
    "//foundation/graphic/graphic_2d:libwmclient",
    "//foundation/multimedia/image_standard/interfaces/innerkits:image_native",
    "//foundation/windowmanager/wm:libwm",
  ]
}

################################################################################
ohos_moduletest("aams_accessibility_keyevent_filter_test") {
  module_out_path = module_output_path

  sources = [
    "../aams/src/accessibility_account_data.cpp",
    "../aams/src/accessibility_common_event.cpp",
    "../aams/src/accessibility_display_manager.cpp",
    "../aams/src/accessibility_event_transmission.cpp",
    "../aams/src/accessibility_gesture_recognizer.cpp",
    "../aams/src/accessibility_input_interceptor.cpp",
    "../aams/src/accessibility_keyevent_filter.cpp",
    "../aams/src/accessibility_mouse_autoclick.cpp",
    "../aams/src/accessibility_short_key.cpp",
    "../aams/src/accessibility_touchEvent_injector.cpp",
    "../aams/src/accessibility_touch_guider.cpp",
    "../aams/src/accessibility_window_connection.cpp",
    "../aams/src/accessibility_window_manager.cpp",
    "../aams/src/accessibility_zoom_gesture.cpp",
    "../aams/src/accessibility_zoom_handler.cpp",
    "../aams/src/accessible_ability_channel.cpp",
    "../aams/src/accessible_ability_connection.cpp",
    "../aams/src/accessible_ability_manager_service.cpp",
    "../aams/src/accessible_ability_manager_service_event_handler.cpp",
    "../aams/src/json_utils.cpp",
    "//base/accessibility/services/test/mock/mock_ability_connect_callback_stub.cpp",
    "//base/accessibility/services/test/mock/mock_ability_manager_client.cpp",
    "//base/accessibility/services/test/mock/mock_accessible_ability_client_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_bundle_manager.cpp",
    "//base/accessibility/services/test/mock/mock_bundle_mgr_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_display.cpp",
    "//base/accessibility/services/test/mock/mock_display_manager.cpp",
    "//base/accessibility/services/test/mock/mock_service_registry.cpp",
    "//base/accessibility/services/test/mock/mock_system_ability.cpp",
    "//third_party/jsoncpp/src/lib_json/json_writer.cpp",
    "moduletest/aamstest/aams_accessibility_keyevent_filter_test/aams_accessibility_keyevent_filter_test.cpp",
  ]

  sources += aams_mock_distributeddatamgr_src
  sources += aams_mock_multimodalinput_src
  sources += aams_mock_powermanager_src
  sources += MockDistributedscheduleSrc

  configs = [ ":module_private_config" ]

  deps = [
    "//base/accessibility/interfaces/innerkits/common:accessibility_common",
    "//base/accessibility/services/interface:aams_interface",
    "//base/global/resource_management/frameworks/resmgr:global_resmgr",
    "//foundation/windowmanager/utils:libwmutil",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//third_party/jsoncpp:jsoncpp",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:runtime",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "common_event_service:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
  ]

  public_deps = [
    "//foundation/graphic/graphic_2d:libwmclient",
    "//foundation/multimedia/image_standard/interfaces/innerkits:image_native",
    "//foundation/windowmanager/wm:libwm",
  ]
}

################################################################################
ohos_moduletest("aams_common_event_registry_test") {
  module_out_path = module_output_path

  sources = [
    "../aams/src//accessibility_event_transmission.cpp",
    "../aams/src/accessibility_account_data.cpp",
    "../aams/src/accessibility_common_event.cpp",
    "../aams/src/accessibility_display_manager.cpp",
    "../aams/src/accessibility_gesture_recognizer.cpp",
    "../aams/src/accessibility_input_interceptor.cpp",
    "../aams/src/accessibility_keyevent_filter.cpp",
    "../aams/src/accessibility_mouse_autoclick.cpp",
    "../aams/src/accessibility_short_key.cpp",
    "../aams/src/accessibility_touchEvent_injector.cpp",
    "../aams/src/accessibility_touch_guider.cpp",
    "../aams/src/accessibility_window_connection.cpp",
    "../aams/src/accessibility_window_manager.cpp",
    "../aams/src/accessibility_zoom_gesture.cpp",
    "../aams/src/accessibility_zoom_handler.cpp",
    "../aams/src/accessible_ability_channel.cpp",
    "../aams/src/accessible_ability_connection.cpp",
    "../aams/src/accessible_ability_manager_service.cpp",
    "../aams/src/accessible_ability_manager_service_event_handler.cpp",
    "../aams/src/json_utils.cpp",
    "//base/accessibility/services/test/mock/mock_ability_connect_callback_stub.cpp",
    "//base/accessibility/services/test/mock/mock_ability_manager_client.cpp",
    "//base/accessibility/services/test/mock/mock_accessible_ability_client_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_bundle_manager.cpp",
    "//base/accessibility/services/test/mock/mock_bundle_mgr_proxy.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_data.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_manager.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_subscribe_info.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_subscriber.cpp",
    "//base/accessibility/services/test/mock/mock_common_event_support.cpp",
    "//base/accessibility/services/test/mock/mock_display.cpp",
    "//base/accessibility/services/test/mock/mock_display_manager.cpp",
    "//base/accessibility/services/test/mock/mock_matching_skill.cpp",
    "//base/accessibility/services/test/mock/mock_service_registry.cpp",
    "//base/accessibility/services/test/mock/mock_system_ability.cpp",
    "moduletest/aamstest/aams_common_event_registry_test/aams_common_event_registry_test.cpp",
  ]

  sources += aams_mock_distributeddatamgr_src
  sources += aams_mock_multimodalinput_src
  sources += aams_mock_powermanager_src
  sources += MockDistributedscheduleSrc

  configs = [ ":module_private_config" ]

  deps = [
    "//base/accessibility/interfaces/innerkits/common:accessibility_common",
    "//base/accessibility/services/interface:aams_interface",
    "//base/global/resource_management/frameworks/resmgr:global_resmgr",
    "//foundation/multimedia/image_standard/interfaces/innerkits:image_native",
    "//foundation/windowmanager/utils:libwmutil",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_runtime:runtime",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "ipc:libdbinder",
    "os_account:os_account_innerkits",
  ]

  public_deps = [
    "//foundation/graphic/graphic_2d:libwmclient",
    "//foundation/multimedia/image_standard/interfaces/innerkits:image_native",
    "//foundation/windowmanager/wm:libwm",
  ]
}

################################################################################
group("moduletest") {
  testonly = true
  deps = []
  if (is_phone_product) {
    deps += [
      ":aams_accessibility_keyevent_filter_test",
      ":aams_accessibility_touchEvent_injector_test",
      ":aams_accessibility_touch_guider_test",
      ":aams_accessible_ability_channel_test",
      ":aams_common_event_registry_test",
      ":aams_server_test",
    ]
  }
}

# Copyright (C) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")

module_output_path = "accessibility/framework_test"

###############################################################################
config("module_private_config") {
  visibility = [ ":*" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  include_dirs = [
    "//base/accessibility/common/log/include",
    "//base/accessibility/dummyData",
    "//base/accessibility/frameworks/aafwk/include",
    "//base/accessibility/frameworks/asacfwk/include",
    "//base/accessibility/interfaces/innerkits/asacfwk/include",
    "//base/accessibility/interfaces/innerkits/common/include",
    "//base/accessibility/services/aams/include",
    "//base/accessibility/services/interface/include",
    "//base/accessibility/services/interface/include/parcel",
    "//base/accessibility/services/test/mock/include/extern",
    "//base/accessibility/util/include",
    "//base/hiviewdfx/hiview/adapter/utility/include/extra/singleton.h",
    "//foundation/aafwk/standard/interfaces/innerkits/uri/include",
    "//foundation/distributedschedule/dmsfwk/services/dtbschedmgr/include",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy/include",
    "//base/accessibility/frameworks/asacfwk/test/mock/include",
    "//third_party/json/include",
    "//third_party/jsoncpp/include",
    "//third_party/jsoncpp/include/json",
    "//utils/native/base/include",
    "//utils/system/safwk/native/include",
    "//base/accessibility/services/aams/test/mock/include",
    "//base/powermgr/power_manager/interfaces/innerkits/native/include",
  ]
  defines = [
    "AAMS_LOG_DOMAIN = 0xD005205",
    "AAMS_LOG_TAG = \"accessibility_test\"",
  ]
}

ohos_unittest("asac_unit_test") {
  module_out_path = module_output_path
  sources = [
    "../src/accessibility_element_operator_impl.cpp",
    "../src/accessibility_system_ability_client_impl.cpp",
    "//base/accessibility/frameworks/asacfwk/test/mock/src/mock_accessibility_account_data.cpp",
    "//base/accessibility/frameworks/common/src/accessibility_caption.cpp",
    "//base/accessibility/frameworks/common/src/accessibility_constants.cpp",
    "//base/accessibility/frameworks/common/src/accessibility_element_info.cpp",
    "//base/accessibility/frameworks/common/src/accessibility_event_info.cpp",
    "//base/accessibility/services/aams/src/accessibility_display_manager.cpp",
    "//base/accessibility/services/aams/src/accessible_ability_manager_service.cpp",
    "//base/accessibility/services/aams/src/accessible_ability_manager_service_event_handler.cpp",
    "//base/accessibility/services/aams/test/mock/src/mock_accessibility_common_event_registry.cpp",
    "//base/accessibility/services/aams/test/mock/src/mock_accessibility_event_transmission.cpp",
    "//base/accessibility/services/aams/test/mock/src/mock_accessibility_input_interceptor.cpp",
    "//base/accessibility/services/aams/test/mock/src/mock_accessibility_window_connection.cpp",
    "//base/accessibility/services/aams/test/mock/src/mock_accessibility_window_manager.cpp",
    "//base/accessibility/services/aams/test/mock/src/mock_accessible_ability_connection.cpp",
    "//base/accessibility/services/aams/test/mock/src/mock_accessible_ability_manager_service_state_observer_proxy.cpp",
    "//base/accessibility/services/aams/test/mock/src/mock_accessible_ability_manager_service_state_observer_stub.cpp",
    "//base/accessibility/services/interface/src/accessibility_element_operator_callback_proxy.cpp",
    "//base/accessibility/services/interface/src/accessibility_element_operator_stub.cpp",
    "//base/accessibility/services/interface/src/accessible_ability_manager_caption_observer_stub.cpp",
    "//base/accessibility/services/interface/src/accessible_ability_manager_service_proxy.cpp",
    "//base/accessibility/services/interface/src/accessible_ability_manager_state_observer_stub.cpp",
    "//base/accessibility/services/interface/src/parcel/accessibility_ability_info_parcel.cpp",
    "//base/accessibility/services/interface/src/parcel/accessibility_caption_parcel.cpp",
    "//base/accessibility/services/interface/src/parcel/accessibility_element_info_parcel.cpp",
    "//base/accessibility/services/interface/src/parcel/accessibility_event_info_parcel.cpp",
    "//foundation/aafwk/standard/interfaces/innerkits/uri/src/uri.cpp",
    "unittest/accessibility_element_operator_impl_test.cpp",
    "unittest/accessibility_system_ability_client_impl_test.cpp",
  ]

  configs = [
    ":module_private_config",
    "//foundation/aafwk/standard/interfaces/innerkits/base:base_public_config",
  ]

  deps = [
    "//base/accessibility/interfaces/innerkits/common:accessibility_common",
    "//base/accessibility/services/interface:aams_interface",
    "//base/global/resmgr_standard/frameworks/resmgr:global_resmgr",
    "//base/miscservices/time/services:time_service",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//third_party/jsoncpp:jsoncpp",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "ces_standard:cesfwk_innerkits",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "input:libmmi-client",
    "ipc:ipc_core",
    "native_appdatamgr:native_preferences",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
    "utils_base:utils",
    "window_manager:libdm",
    "window_manager:libwm",
  ]
}

###############################################################################

group("unittest") {
  testonly = true
  deps = []

  deps += [ ":asac_unit_test" ]
}
###############################################################################

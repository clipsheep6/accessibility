# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")

module_output_path = "accessibility/framework_test"

###############################################################################
config("module_private_config") {
  visibility = [ ":*" ]
  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  include_dirs = [
    "mock",
    "//third_party/json/include",
    "//utils/native/base/include",
    "//utils/system/safwk/native/include",
    "//base/accessibility/frameworks/aafwk/include",
    "//base/accessibility/interfaces/innerkits/asacfwk/include",
    "//base/accessibility/frameworks/asacfwk/include",
    "//base/accessibility/util/include",
    "//base/accessibility/common/log/include",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "//base/accessibility/dummyData",
    "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_core/include/bundlemgr",
  ]
  defines = [
    "AAMS_LOG_TAG = \"accessibility_test\"",
    "AAMS_LOG_DOMAIN = 0xD005205",
  ]
}

ohos_unittest("accessible_ability_test") {
  module_out_path = module_output_path
  sources = [
    "../src/accessibility_extension.cpp",
    "../src/accessibility_extension_context.cpp",
    "../src/display_resize_controller.cpp",
    "../src/accessible_ability_client_proxy.cpp",
    "../src/accessible_ability_client_stub_impl.cpp",
    "../src/accessible_ability_client_stub.cpp",
    "unittest/accessibility_extension_context_test.cpp",
    "unittest/display_resize_controller_test.cpp",
    "unittest/accessible_ability_client_proxy_test.cpp",
    "unittest/accessible_ability_client_stub_test.cpp",
    "unittest/accessible_ability_client_stub_impl_test.cpp",
    "mock/mock_accessibility_operator.cpp",
    "mock/mock_accessibility_element_info.cpp",
    "mock/mock_gesture_simulation.cpp",
    "mock/mock_accessibility_event_info.cpp",
    "mock/mock_accessible_ability_channel_proxy.cpp",
    "mock/mock_accessible_ability_manager_service_proxy.cpp",
    "mock/mock_accessibility_element_operator_callback_stub.cpp",
    "mock/mock_accessibility_window_info.cpp",
    "../../asacfwk/src/accessibility_caption.cpp"
  ]

  configs = [
    ":module_private_config",
    "//foundation/aafwk/standard/interfaces/innerkits/base:base_public_config",
  ]

  deps = [
    "//foundation/appexecfwk/standard/interfaces/innerkits/libeventhandler:libeventhandler",
    "//base/global/resmgr_standard/frameworks/resmgr:global_resmgr",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
    "//foundation/aafwk/standard/frameworks/kits/ability/native:abilitykit_native",
  ]

  external_deps = [
    "ipc:ipc_core",
    "hiviewdfx_hilog_native:libhilog",
    "multimodalinput_base:libmmi-client",
    "samgr_standard:samgr_proxy",
    "ability_base:want",
    "ability_runtime:runtime",
  ]
}

###############################################################################

group("unittest") {
  testonly = true
  deps = []

  deps += [
    ":accessible_ability_test",
  ]
}
###############################################################################